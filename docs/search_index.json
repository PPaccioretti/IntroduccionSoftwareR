[["index.html", "Introducción al software R Notas de clases Sección 1 Instalación de programas 1.1 Breve introducción a la interfaz del intérprete de InfoStat 1.2 Breve introducción a la interfaz de RStudio", " Introducción al software R Notas de clases Paccioretti Pablo1 Bruno Cecilia2 González Montoro Aldana3 Nores María Laura4 Sección 1 Instalación de programas R puede ser instalado en múltiples plataformas tales como Windows, Mac OS y en sistemas basados en Linux. Además hay múltiples entornos de desarrollo integrado (Integrated Development Environment IDE) los cuales facilitan la programación. Ejemplos de este tipo de software es el intérprete de R que contiene InfoStat (Di Rienzo et al. 2018) y RStudio (RStudio Team 2016). Las interfaces gráficas de ambos softwares son similares. Links para las descargas: R (windows) InfoStat 1.1 Breve introducción a la interfaz del intérprete de InfoStat La interfaz del intérprete de R en InfoStat se divide en cuatro paneles. Diseño de los paneles del intérprete de R de InfoStat RStudio El panel superior izquierdo permite al usuario visualizar scripts previamente escritos o escribir nuevos. En el panel inferior izquierdo se muestran los resultados. En los paneles derechos se muestran los objetos cargados en el ambiente de trabajo, mientras que en el panel inferior derecho se muestran los paquetes instalados y en rojo los paquetes cargados. 1.2 Breve introducción a la interfaz de RStudio Links de descarga: RStudio La interfaz de RStudio se divide en cuatro paneles. Diseño de los paneles de RStudio El panel superior izquierdo permite al usuario cargar scripts previamente escritos o escribir nuevos. En el panel consola se muestran las sentencias de código ejecutadas y los resultados. En los paneles derechos se muestran los objetos cargados en el ambiente de trabajo, mientras que en el panel inferior derecho se muestran archivos en el directorio de trabajo, gráficos generados, ayudas. pablopaccioretti@agro.unc.edu.ar cebruno@agro.unc.edu.ar aldana.goonzalez.montoro@unc.edu.ar lalinores@yahoo.com.ar "],["intro.html", "Sección 2 Breve introducción a R 2.1 Generalidades del ambiente R", " Sección 2 Breve introducción a R R (R Core Team 2020) es un lenguaje de programación orientado a objetos. Fue creado por Ross Ihaka y Robert Gentleman en 1993 como un dialecto del software S, fue publicado en 1996 (Ihaka and Gentleman 1996). Es un software libre y de código abierto, lo que significa que se puede usar, compartir y modificar el software libremente. Junto con el instalador de R, se distribuyen ciertos paquetes (packages) los cuales incluyen funciones para implementar algunos métodos estadísticos clásicos y modernos. Muchas personas utilizan R para realizar análisis estadísticos por esta razón. Muchos algoritmos y metodologías estadísticas están disponibles para ser implementadas en R, pero se debe buscar en cual paquete está disponible y descargarlo para su utilización. 2.1 Generalidades del ambiente R R distingue mayúsculas y minúsculas, esto significa que P y p son objetos diferentes. Los comandos elementales consisten en expresiones o asignaciones. Si se ejecuta una expresión el resultado se imprimirá en la consola pero no se guardará dicho valor. Cuando se asigna un valor de una expresión (mediante el comando &lt;-), el resultado no se imprimirá en pantalla y se almacenará en un objeto. Comandos diferentes son separados por ; o por una nueva línea. Un conjunto de comandos pueden estar encerrados entre llaves ({ y }). Los # indican comentarios en el código, todo lo que está a la derecha de este símbolo no será ejecutado por R. Si se desean hacer comentarios en más de una línea, cada una de ellas debe comenzar con #. Si deseamos guardar en el objeto llamado x el valor de la raíz cuadrada de 10, debemos utilizar la función &lt;-: x &lt;- sqrt(10) #No se muestra el resultado Para ver el valor de cualquier objeto, se puede especificar el nombre y ejecutar la línea, por ejemplo si deseamos ver el valor que está almacenado en x debemos escribir y ejecutar: x #Se muestra el resultado ## [1] 3.162278 sqrt(10) #Se imprime en la consola el resultado ## [1] 3.162278 Las funciones son segmentos de código escrito para llevar a cabo una tarea específica, en el ejemplo anterior se utilizó la función sqrt para calcular la raíz cuadrada de 10. Las funciones pueden necesitar argumentos y devolvuelven uno o más valores en el resultado, algunas funciones pueden no devolver ningún resultado visible. Los argumentos de la función son los inputs para ejecutar la tarea. Argumentos deben ir dentro de paréntesis luego del nombre de la función, cada argumento se separa con , ((arg1,arg2 )). Nombres de los argumentos pueden especificarse explicitamente o no. Si no se detalla el nombre del argumento, R entenderá que están en el mismo orden que se especificaron cuando se creó la función. En el caso de sqrt el primer y único argumento de la función es un objeto numerico. Notar que la mayoría de las funciones de R derivan del inglés y que utiliza . como separador decimal. ##Funciones y comandos básicos En R se puede ejecutar cualquier operación matemática. Comencemos viendo algunas operaciones básicas: Suma: 5+2 ## [1] 7 Raíz cuadrada: sqrt(15) ## [1] 3.872983 2.1.1 Tablas resumen de operadores y funciones Tabla 2.1: Algunas funciones matemáticas en R Sintaxis Operación x + y suma de x e y x - y diferencia de x e y x * y multiplicación de x e y x / y división de x por y x %/% y parte entera de la división de x por y x %% y resto de la división de x por y x ^ y x elevado a y-ésima potencia x &lt; y x menor que y x &lt;= y x menor o igual que y x &gt; y x mayor que y x &gt;= y x mayor o igual que y x == y x igual a y x != y x no es igual a y sqrt(x) raíz cuadrada de x exp(x) exponencial de x log(x) logaritmo natural de x log(x, k) logaritmo base k de x sum(x) suma de los elementos de x prod(x) producto de los elementos de x round(x, k) x redondeado a k dígitos 2.1.2 Ayuda R incluye documentación de ayuda muy detallada. Para acceder a la ayuda de cada función, objeto o datos de prueba se debe ejecutar el comando help() o ?. Por ejemplo help(sqrt), o ?sqrt. Otra forma de pedir la ayuda es presionando F1 luego de seleccionar la función. La sentencia ?? busca un patrón dentro de la documentación del sistema de ayuda, es útil si no se conoce cual función ejecuta cierto análisis. Otra herramienta muy útil para buscar ayuda es Google o Stack Overflow. help(sqrt) ??square 2.1.3 Asignaciones Como ya se especificó en la sección 2.1, un comando de asignación es &lt;-, donde a la izquierda se especifica el nombre del objeto y a la derecha el valor, ya sean resultados de un cálculo o de un análisis estadístico. Por ejemplo, si se desea asignar el valor de 5 al objeto radio se debe ejecutar radio &lt;- 5. Otras formas de hacer asignaciones es mediante la utilización de = o -&gt;, este último no es utilizado comúnmente. Asignaremos al objeto x una secuencia numérica del 1 al 5 y luego ver el contenido de x: x&lt;-c(1,2,3,4,5) #No se muestra el resultado x #Se auto imprime el resultado ## [1] 1 2 3 4 5 print(x) #Imprime el resultado de manera explícita mediante el comando print ## [1] 1 2 3 4 5 Otra formas de asignar valores es utilizando -&gt; o = c(1,2,3)-&gt;x x ## [1] 1 2 3 x=c(1,2,3,4) x ## [1] 1 2 3 4 Al utilizar el comando de asignación con el mismo nombre de objeto (x), cada vez que se utilizó ese comando, el valor que contenía previamente se reasignó con el valor nuevo. 2.1.4 R como herramienta estadística En el paquete stats (uno de los paquetes instalados por defecto) permite entre otras cosas, obtener la densidad, función de distribución (probabilidades), cuantiles y generar números aleatorios de las distribuciones estadísticas más comunes. Por ejemplo, si se desea generar 40 números aleatorios de una distribución normal estándar se deberá ejecutar la sentencia rnorm(40). Si se desea calcular medidas descriptivas básicas de un vector se puede ejecutar mean para calcular la media, sd para calcular el desvío estándar y var para la varianza. Otra función útil para obtener valores de posición es la función summary. x&lt;- rnorm(40) summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -2.6059 -0.5732 -0.1843 -0.1514 0.5919 2.0122 2.1.5 R como herramienta gráfica Con R se puede realizar gráficos y modificar numerosos parámetros del gráfico para su publicación. Se realizará un histograma y un boxplot de la variable x generada anteriormente. hist(x) boxplot(x) Podría decirse que la función más importante para generar gráficos es plot. Permite entre otros, realizar diagramas de dispersión y editar algunos elementos del gráfico. x &lt;- c(-4,-3,-2,-1,0,1,2,3,4) # Observar que se remplazó el objeto &quot;x&quot; que se generó previamente y &lt;- x^2 plot(x,y) plot(x,y, type=&quot;b&quot;, col=&quot;red&quot;) Ejercitación Funciones y comandos básicos Calcule la raiz cuadrada de 10 Calcule el perimetro del círculo de radio 5 (\\(P = 2\\pi \\times r\\)) Calcule 270 dividido la suma entre 12 y 78 Calcule el cuadrado de 8 Calcule el logaritmo de 10 Asignaciones y aritmética vectorial Calcule el perímetro del círculo de radio 5 y guárdelo en el objeto per. Crear el vector de coordenadas 6,7,8,9,10 y llamarlo zSuma de dos vectores Calcular la suma de z y x Calcular el doble de x ¿Qué se obtiene haciendo el producto entre los vectores z y x? R como herramienta estadística Generar un vector y con 20 realizaciones de una normal con media 5 y desvío estándar 2. Calcular la media y la varianza de y. Realizar un histograma. "],["funciones-y-comandos-básicos.html", "Sección 3 Funciones y comandos básicos 3.1 Ayuda", " Sección 3 Funciones y comandos básicos En R se puede ejecutar cualquier operación matemática. Comencemos viendo algunas operaciones básicas: Suma: 5 + 2 ## [1] 7 Raíz cuadrada: sqrt(15) ## [1] 3.872983 3.1 Ayuda R incluye documentación de ayuda muy detallada. Para acceder a la ayuda de cada función, objeto o datos de prueba se debe ejecutar el comando help() o ?. Por ejemplo help(sqrt), o ?sqrt. Otra forma de pedir la ayuda es presionando F1 luego de seleccionar la función. La sentencia ?? busca un patrón dentro de la documentación del sistema de ayuda, es útil si no se conoce cual función ejecuta cierto análisis. Otra herramienta muy útil para buscar ayuda es Google o Stack Overflow. help(sqrt) ??square Ejercitación Funciones y comandos básicos Calcule la raiz cuadrada de 10 Calcule el perimetro del círculo de radio 5 (\\(P = 2\\pi \\times r\\)) Calcule 270 dividido la suma entre 12 y 78 Calcule el cuadrado de 8 Calcule el logaritmo de 10 Asignaciones y aritmética vectorial R como herramienta gráfica Generar un vector y con 20 realizaciones de una normal con media 5 y desvío estándar 2. Calcular la media y la varianza de y. "],["objetos-en-r.html", "Sección 4 Objetos en R 4.1 Vectores 4.2 Matrices 4.3 Listas 4.4 Hojas de datos (Data frames) 4.5 Algunas funciones básicas predefinidas", " Sección 4 Objetos en R Los resultados de un cierto procedimiento o valores pueden ser almacenados en diferentes clases de objetos. R tiene cinco clases básicas de objetos, números (numeric), números complejos (complex), cadenas de caracteres (character), factores (factor) y valores lógicos (logical). Éstos pueden juntarse para formar vectores (vector), matrices (matrix), hojas de datos (data.frame) o listas (list). Otras clases de objetos pueden ser funciones, modelos, objetos espaciales, entre otros. En esta sección trabajaremos con algunos de ellos. Para conocer la clase de un objeto se utiliza la función class. 4.1 Vectores Es el objeto más simple de R. Es importante tener en cuenta que los vectores solo contienen elementos de la misma clase. La función c() puede utilizarse para crear vectores concatentando sus argumentos. x &lt;- c(2,4,6) #numérico (enteros) a &lt;- c(-1,5,9,10.5) #numérico (contínuo) d &lt;- c(4+2i, 2+5i) #números complejos y &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) #caracteres z &lt;- c(TRUE, TRUE, FALSE, T) #lógico Si quisieramos concatenar x y a podemos llamar esos objetos dentro de la función c(). Para calcular la longitud del objeto se utiliza la función length() x &lt;- c(2,4,6) a &lt;- c(-1,5,9,10.5) x_a &lt;- c(x,a) x_a ## [1] 2.0 4.0 6.0 -1.0 5.0 9.0 10.5 length(x_a) ## [1] 7 Note que en el ejemplo anterior T y F es la forma corta de especificar TRUE y FALSE. Es recomendable utilizar la forma explícita de TRUE y FALSE que la forma corta, dado que T y F son símbolos que pueden redefinirse, por lo que no se debería asumir que siempre se van a evaluar como operadores lógicos. 4.1.1 Secuencias x &lt;- c(1, 2, 3, 4, 5) x &lt;- 1:10 y &lt;- -5:3 Para generar secuencias de números enteros consecutivos se puede utilizar :, pero si se desea generar otros tipos de secuencias, por ejemplo la secuencia 4,6,8,,20, se debe utilizar la función seq. Los argumentos de esta función permiten generar secuencias con saltos o longitud definida por el usuario. seq(from = 4, to = 20, by = 2) ## [1] 4 6 8 10 12 14 16 18 20 Los argumentos de la función seq, permiten generar secuencia, desde (from y, hasta (to) los valores especificados. Se pueden especificar el incremento de cada valor (by), o puede definirse el largo de la secuencia deseada (length.out). 4.1.2 Vectores con valores repetidos Cuando se desea generar un vector con valores repetidos se puede utilizar la función rep. Esta función replica los valores que se espicifican en el primer argumento, tantas veces o hasta alcanzar la longitud total que se especifique. rep(1, 5) ## [1] 1 1 1 1 1 x &lt;- 1:3 rep(x, 2) ## [1] 1 2 3 1 2 3 rep(x, c(2,4,1)) #En este caso repetirá el 1 dos vecesm el 2 cuatro veces y el 3 una vez. ## [1] 1 1 2 2 2 2 3 rep(x, length = 8) ## [1] 1 2 3 1 2 3 1 2 4.1.3 Vectores de factores Los vectores que se generan pueden convertirse en factores, para ello se utiliza la función as.factor. x_f &lt;- as.factor(x) Tambien pueden generarse vectores que contiene factores utilizando gl. A esta función se le debe especificar el número de niveles del factor y el número de repeticiones. Se le puede especificar el largo del vector y las etiquetas (labels) de los factores. gl(3, 5) ## [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 ## Levels: 1 2 3 gl(3, 5, length = 30) ## [1] 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 1 1 1 1 1 2 2 2 2 2 3 3 3 3 3 ## Levels: 1 2 3 gl(3, 5, labels = c(&quot;grupo A&quot;, &quot;grupo B&quot;, &quot;grupo C&quot;)) ## [1] grupo A grupo A grupo A grupo A grupo A grupo B grupo B grupo B grupo B ## [10] grupo B grupo C grupo C grupo C grupo C grupo C ## Levels: grupo A grupo B grupo C 4.1.4 Seleccion de elementos de un vector Los corchetes ([ ]) se utilizan para indicar posición de un objeto. Se utilizan del lado derecho del objeto. Dado que los vectores son elementos de una dimensión, si se desea seleccionar el primer elemento del objeto x se debe indicar x[1]. x &lt;- c(3,52,-8,2,1,7,11,-3,0,6,23,17) x[1] ## [1] 3 x[3] ## [1] -8 x[c(1, 3)] ## [1] 3 -8 Si se desea sustituir un elemento del vector se puede utilizar el signo de asignación. Por ejemplo, si se desea sustituir el tercer elemento de x por 88: x[3] &lt;- 88 x ## [1] 3 52 88 2 1 7 11 -3 0 6 23 17 Si se quiere obtener un vector sin algunos elementos, se debe anteponer el signo - al valor del índice. x[-3] ## [1] 3 52 2 1 7 11 -3 0 6 23 17 4.2 Matrices Las matrices son vectores con atributo de dimensión (2 dimensiones: filas y columnas). A diferencia de los data.frames, todas las columnas de las matrices son de una misma clase. Para generar matrices se puede utilizar la función matrix. x &lt;- 1:20 matrix(x, nrow = 5, ncol = 4) ## [,1] [,2] [,3] [,4] ## [1,] 1 6 11 16 ## [2,] 2 7 12 17 ## [3,] 3 8 13 18 ## [4,] 4 9 14 19 ## [5,] 5 10 15 20 Las matrices pueden ser creadas uniendo filas o columnas mediante las funciones cbind() y rbind(). x &lt;- 1:3 y &lt;- 10:12 cbind(x, y) ## x y ## [1,] 1 10 ## [2,] 2 11 ## [3,] 3 12 rbind(x, y) ## [,1] [,2] [,3] ## x 1 2 3 ## y 10 11 12 4.2.1 Operaciones con matrices: A %*% B : producto de matrices t(A) : traspuesta de la matriz A solve(A) : inversa de la matriz A solve(A,b) : solución del sistema de ecuaciones Ax=b. svd(A) : descomposición en valores singulares qr(A) : descomposición QR eigen(A) : valores y vectores propios diag(b) : matriz diagonal. (b es un vector) diag(A) : matriz diagonal. (A es una matriz) A %o% B == outer(A,B) : producto exterior de dos vectores o matrices 4.3 Listas Una lista es la forma generalizada de un vector que puede contener elementos de diferentes clases (número, vector, matriz, lista, etc.). Para crear lista se puede utilizar la función list(). Dada su flexibilidad son contenedores generales de datos. Muchas funciones devuelven un conjunto de resultados de distinta longitud y distinto tipo en forma de lista. n &lt;- c(2, 4, 6) s &lt;- c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) b &lt;- c(TRUE, FALSE, TRUE, FALSE, FALSE) x &lt;- list(n, s, b) x ## [[1]] ## [1] 2 4 6 ## ## [[2]] ## [1] &quot;aa&quot; &quot;bb&quot; &quot;cc&quot; &quot;dd&quot; &quot;ee&quot; ## ## [[3]] ## [1] TRUE FALSE TRUE FALSE FALSE 4.4 Hojas de datos (Data frames) Es el objeto más común en R para almacenar datos. Sus columnas pueden ser de diferentes clases por ejemplo variables continuas y categóricas. Este tipo de objetos puede generarse mediante la función data.frame(). data.frame convierte los vectores de caracteres en factores automáticamente. x1 &lt;- 1:10 x2 &lt;- 24:33 x3 &lt;- gl(2, 5, labels = c(&quot;si&quot;,&quot;no&quot;)) x4 &lt;- letters[1:10] data.frame(A = x1, B = x2, C = x3, D = x4) ## A B C D ## 1 1 24 si a ## 2 2 25 si b ## 3 3 26 si c ## 4 4 27 si d ## 5 5 28 si e ## 6 6 29 no f ## 7 7 30 no g ## 8 8 31 no h ## 9 9 32 no i ## 10 10 33 no j 4.5 Algunas funciones básicas predefinidas summay() mean() var() sd() cor() sum() min() max() seq() which() which.min() which.min() length() table() is.na() is.null() complete.cases() as.character() as.numeric() paste() gsub() unique() lm() dim() nrow() ncol() colnames() rownames() edit() cbind() rbind() order() install.packages() library() Ejercitación Vectores Genere un vector b el cual contenga los valores de x y a ¿Cuantos elementos tiene el vector b? Secuencias Genere la secuencia 8,7,6,5,4 seq(4,20,2) ¿Este comando da eror? ¿Por qué? Genere usando comandos para secuencias el vector de componentes: 1, 2, 3, 4, 5, 6, 73, 72, 71, 70, 69, 68, 3, 6, 9, 12, 15, 18. Repetir valores Genere un vector de componentes azul, azul,azul, azul, amarillo, amarillo, verde, verde,verde, llamado col. ¿Es un vector de factores? Matrices Calcule la inversa y los autovalores y autovectores de A = matrix(c(1,3,3,9,5,9,3,5,6), nrow = 3) "],["control-de-flujo.html", "Sección 5 Control de flujo 5.1 Construcción condicional if 5.2 Construcción repetitiva for 5.3 Construccion repetitiva while", " Sección 5 Control de flujo 5.1 Construcción condicional if Es de la forma if (expr 1) expr 2 else expr 3 donde expr 1 debe producir un valor logico. Si expr 1 es verdadero (T), se ejecutara expr 2. Si expr 1 es falso (F), y se ha escrito la opcion else, que es opcional, se ejecutara expr 3. if( 3 &gt; 2) print(&quot;yes&quot;) ## [1] &quot;yes&quot; if( 2 &gt; 3) print(&quot;yes&quot;) if( 2 &gt; 3) print(&quot;yes&quot;) else print(&quot;no&quot;) ## [1] &quot;no&quot; Ejemplo con dos condiciones supongamos que x &lt;- 75 es la nota numerica de examen de un alumno, queremos asignar nota A, B o C if(x &lt; 60) nota = &quot;C&quot; if(x &gt;= 60 &amp; x &lt; 80) nota = &quot;B&quot; if(x &gt;= 80) nota = &quot;A&quot; ifelse es la versión vectorizada de if Ejemplo nota.num &lt;- c(39, 51, 60, 65, 72, 78, 79, 83, 85, 85, 87, 89, 91, 95, 96, 97, 100, 100) prueba &lt;- ifelse (nota.num &gt;= 60, &quot;aprobado&quot;, &quot;desaprobado&quot;) prueba ## [1] &quot;desaprobado&quot; &quot;desaprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; ## [6] &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; ## [11] &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; ## [16] &quot;aprobado&quot; &quot;aprobado&quot; &quot;aprobado&quot; 5.2 Construcción repetitiva for Es de la forma for (nombre in expr 1) expr 2 donde nombre es la variable de control de iteración, expr 1 es un vector (a menudo de la forma m:n), y expr 2 es una expresión, a menudo agrupada, en cuyas sub-expresiones puede aparecer la variable de control, nombre. expr 2 se evalua repetidamente conforme nombre recorre los valores del vector expr 1. for (i in 1:10) print(i) ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 x = numeric(10) for (i in 1:10) x[i] = i^2 y = 0 for (i in 1:10) y = y + i 5.3 Construccion repetitiva while Es de la forma while (expr1) expr2, indicando que se quiere repetir la acción expr2 mientras que ocurra expr1. i = 0 while (i &lt; 15) {print(i); i = i+1} ## [1] 0 ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 ## [1] 6 ## [1] 7 ## [1] 8 ## [1] 9 ## [1] 10 ## [1] 11 ## [1] 12 ## [1] 13 ## [1] 14 Ejercitación Construcción condicional Si se quiere poner notas A, B o C: C si final_score &lt;60, B si 60 =&lt; final_score &lt; 80, A si 80 =&lt; final_score =&lt; 100. Construcción repetitiva Usar un ciclo for para contar la cantidad de números mayores a 10 en el vector x &lt;- c(2,5,3,9,8,11,6,8,12,3,57,56) "],["generar-nuevas-funciones.html", "Sección 6 Generar nuevas funciones", " Sección 6 Generar nuevas funciones R es un lenguaje que permite crear nuevas funciones. Una funcion se define con una asignacion de la forma: nombre &lt;- function(arg1, arg2, ...) { expresion } La expresion es una fórmula o grupo de formulas (o sentencias) que utilizan los argumentos para calcular uno o varios valores. El resultado de dicha expresión es el valor que proporciona R en su salida y este puede ser un número, un vector, un gráfico, una lista y/o un mensaje. Una función devuelve el último valor impreso en la consola. Ejemplos: funcion1 &lt;- function(x){ y = x + 4} (a&lt;-funcion1(5)) ## [1] 9 En en caso siguiente, si se desea guardar el resultado en un objeto solo se guardará el rango (último valor impreso en consola). funcion2 &lt;- function(muestra){ #El único argumento es un vector de datos media = mean(muestra, na.rm = T) varianza = var(muestra, na.rm = T) rango = max(muestra, na.rm = T) - min(muestra, na.rm = T) print(media) print(varianza) print(rango) } funcion2(rnorm(40,5,16)) ## [1] 0.8221842 ## [1] 270.8349 ## [1] 75.98451 Para que guarde los tres resultados hay que especificar que se haga una lista o vector. funcion3 &lt;- function(muestra){ med = mean(muestra, na.rm = T) vari = var(muestra, na.rm = T) rang = max(muestra, na.rm = T) - min(muestra, na.rm = T) # list(media = med, varianza = vari ,rango = rang) c(&quot;Media&quot;=med,&quot;Var&quot;=vari,&quot;Rango&quot;=rang) } ej &lt;- funcion3(1:20) ej ## Media Var Rango ## 10.5 35.0 19.0 Los diferentes argumentos de las funciones se separan con ,. Éstos pueden tener un valor por defecto. Para especificarlo, en el momento de crear la función se especifica con el signo =, cuál es el valor que se usará si el usuario no lo especifica explícitamente. funcion4 &lt;- function(a,b,c = 4,d = FALSE){ if (d == FALSE) x1 &lt;- a*b else x1 &lt;- a*b + c x1 } Ejercitación Funciones Genere una función que grafique una variable en función de otra y coloque nombre al eje x que por defecto sea: mi eje x "],["referencias.html", "Referencias", " Referencias Di Rienzo, JA, F Casanoves, MG Balzarini, L Gonzalez, M Tablada, and CW Robledo. 2018. InfoStat. Universidad Nacional de Córdoba. http://www.infostat.com.ar/. Ihaka, Ross, and Robert Gentleman. 1996. R: A Language for Data Analysis and Graphics. Journal of Computational and Graphical Statistics 5 (3): 299314. R Core Team. 2020. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/. RStudio Team. 2016. RStudio: Integrated Development Environment for r. Boston, MA: RStudio, Inc. http://www.rstudio.com/. "]]
